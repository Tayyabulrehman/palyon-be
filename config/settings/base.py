"""
Django settings for enoteca_project_app project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from django.utils.translation import gettext_lazy as _

# import djangoSECRET_KEY
# django.setup()
from dotenv import load_dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
load_dotenv()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
DIR = os.path.abspath(os.path.dirname(__file__))
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2-2*plkf790vy#+%@(2@p!*^52xd%drvg!fp2^m-yagadl+v+n'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
#
# ALLOWED_HOSTS = []


# Application definition


DJANGO_APPS = (

    'django.contrib.admin',
    'django.contrib.auth',
    # 'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)
THIRD_PARTY_APPS = (
    'rest_framework',
    'rest_framework.authtoken',
    'oauth2_provider',
    # 'django.contrib.gis'

)
PROJECT_APPS = (
    "api",
    "main",
    "api.users",
    "api.vendor",
    "api.customer",
    "api.bookings"

)
DEBUG_APPS = (
    'corsheaders',
)

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS + DEBUG_APPS

ROOT_URLCONF = 'config.urls'
AUTH_USER_MODEL = "users.User"

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Karachi'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTHENTICATION_BACKENDS = [
    # 'django.contrib.auth.backends.AllowAllUsersModelBackend',
    'api.auth_backend.EmailOrUsernameBackend',
    # 'oauth2_provider.backends.OAuth2Backend',
]
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 60 * 60 * 24 * 30 * 12,
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": os.getenv("OIDC_RSA_PRIVATE_KEY"),
    "OAUTH2_VALIDATOR_CLASS": 'api.oauth_validator.CustomOAuth2Validator',
    'SCOPES': {
        'openid': 'OpenID Connect scope',
        'profile': 'Access to your profile',
        'email': 'Access to your email',
    },

}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    "EXCEPTION_HANDLER": "api.permissions.custom_exception_handler",
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication'
    )
}
LANGUAGES = (
    ('en', _('English')),
    ('it', _('Italian')),
)

LANGUAGE_ROOT = os.path.join(BASE_DIR, 'locale/')

LOCALE_PATHS = [
    LANGUAGE_ROOT
]
USE_S3 = os.getenv("USE_S3", False)
if USE_S3:
    DEFAULT_FILE_STORAGE = "enoteca_project_app.storage_backends.MediaStorage"
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('S3_BUCKET_NAME')

    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'eu-west-3')
    AWS_S3_CUSTOM_DOMAIN = f's3.{AWS_S3_REGION_NAME}.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}'
    CLOUD_FRONT_CDN = f's3.{AWS_S3_REGION_NAME}.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}/media'

HOST_URL = os.getenv('HOST_URL', None)
AUTHORIZATION_SERVER_URL = f'{HOST_URL}/api/oauth/token/'
REVOKE_TOKEN_URL = os.getenv(
    'REVOKE_TOKEN_URLs', f'{HOST_URL}/api/oauth/revoke-token/'
)

OAUTH_CLIENT_ID = os.getenv('OAUTH_CLIENT_ID',
                            None)  # os.getenv('OAUTH_CLIENT_ID', 'gZUXTS8pj4Wu2pBvd3Z8XBd0rJVUOLfbeHHQe7Tx')

OAUTH_CLIENT_SECRET = os.getenv('OAUTH_CLIENT_SECRET', None)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"